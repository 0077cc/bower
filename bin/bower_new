#!/usr/bin/env node

var path = require('path');
var tty = require('tty');
var updateNotifier = require('update-notifier');
var pkg = require(path.join(__dirname, '..', 'package.json'));
var config = require('../lib/config');
var cli = require('../lib/util/cli');
var Logger = require('../lib/core/Logger');
var commands = require('../lib/commands');

// --------

var options;
var renderer;
var loglevel;
var command;
var emitter;
var notifier;
var levels = Logger.LEVELS;

process.title = 'bower';

// Handle print of version
options = cli.readOptions({
    version: { type: Boolean, shorthand: 'v' }
});

if (options.version) {
    process.stdout.write(pkg.version + '\n');
    process.exit();
}

// Set loglevel
if (config.silent) {
    loglevel = levels.error;
} else if (config.verbose) {
    loglevel = -Infinity;
} else if (config.quiet) {
    loglevel = levels.warn;
} else {
    loglevel = levels[config.loglevel] || levels.info;
}

// Enable interactive if terminal is TTY,
// loglevel is equal or lower then conflict and
// the output is not json
config.interactive = tty.isatty(1) &&
                     loglevel <= levels.conflict &&
                     !config.json;

// Get the command to execute
// TODO: abbreviations
command = options.argv.remain && options.argv.remain.shift();
if (!commands[command]) {
    command = 'help';
}

// Execute the command
emitter = commands[command].line(process.argv);

// Connect the command output to the renderer
renderer = cli.getRenderer(emitter.command, config);
emitter
.on('end', function (data) {
    if (!config.silent) {
        renderer.end(data);
    }
})
.on('error', function (err)  {
    if (levels.error >= loglevel) {
        renderer.error(err);
    }

    process.exit(1);
})
.on('log', function (log) {
    if (levels[log.level] >= loglevel) {
        renderer.log(log);
    }
});

// Check for newer version of Bower
notifier = updateNotifier({
    packageName: pkg.name,
    packageVersion: pkg.version
});

if (notifier.update && levels.info >= loglevel) {
    renderer.updateNotice(notifier.update);
}